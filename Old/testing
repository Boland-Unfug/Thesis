// SCALE factor to convert between Box2D units (meters) and pixels.
    const float SCALE = 30.f;

    // Create ground body
    float ground_x_position = 400.f; // needs to be the middle, as things are measured from the center
    float ground_y_position = 800.f;
    float ground_width = size; // If we divide these by two we get the center of the rectangle
    float ground_height = 20.f;
    // These numbers get modified by their CENTER, not the top left corner
    b2BodyDef groundBodyDef;
    groundBodyDef.position.Set(ground_x_position / SCALE, ground_y_position / SCALE);
    b2Body* groundBody = world.CreateBody(&groundBodyDef);
    b2PolygonShape groundBox;
    groundBox.SetAsBox((ground_width/2) / SCALE, (ground_height/2) / SCALE);
    groundBody->CreateFixture(&groundBox, 0.0f);

    // SFML shape for the ground
    sf::RectangleShape ground(sf::Vector2f(ground_width, ground_height));
    ground.setFillColor(sf::Color::Green);
    ground.setPosition(ground_x_position, ground_y_position);
    ground.setOrigin(ground_width/2, ground_height/2); // relative to the 500 x 20 rectangle, so this is in the middle?

    // Create ceiling body
    float ceiling_x_position = 400.f; // needs to be the middle, as things are measured from the center
    float ceiling_y_position = 0.f;
    float ceiling_width = size; // If we divide these by two we get the center of the rectangle
    float ceiling_height = 20.f;
    // These numbers get modified by their CENTER, not the top left corner
    b2BodyDef ceilingBodyDef;
    ceilingBodyDef.position.Set(ceiling_x_position / SCALE, ceiling_y_position / SCALE);
    b2Body* ceilingBody = world.CreateBody(&ceilingBodyDef);
    b2PolygonShape ceilingBox;
    ceilingBox.SetAsBox((ceiling_width/2) / SCALE, (ceiling_height/2) / SCALE);
    ceilingBody->CreateFixture(&ceilingBox, 0.0f);

    // SFML shape for the ceiling
    sf::RectangleShape ceiling(sf::Vector2f(ceiling_width, ceiling_height));
    ceiling.setFillColor(sf::Color::Green);
    ceiling.setPosition(ceiling_x_position, ceiling_y_position);
    ceiling.setOrigin(ceiling_width/2, ceiling_height/2); // relative to the 500 x 20 rectangle, so this is in the middle?

    // Create left wall body
    float left_wall_x_position = 0.f; // needs to be the middle, as things are measured from the center
    float left_wall_y_position = 400.f;
    float left_wall_width = 20.f; // If we divide these by two we get the center of the rectangle
    float left_wall_height = size; // If we divide these by two we get the center of the rectangle
    // These numbers get modified by their CENTER, not the top left corner
    b2BodyDef left_wallBodyDef;
    left_wallBodyDef.position.Set(left_wall_x_position / SCALE, left_wall_y_position / SCALE);
    b2Body* left_wallBody = world.CreateBody(&left_wallBodyDef);
    b2PolygonShape left_wallBox;
    left_wallBox.SetAsBox((left_wall_width/2) / SCALE, (left_wall_height/2) / SCALE);
    left_wallBody->CreateFixture(&left_wallBox, 0.0f);

    // SFML shape for the left wall
    sf::RectangleShape left_wall(sf::Vector2f(left_wall_width, left_wall_height));
    left_wall.setFillColor(sf::Color::Green);
    left_wall.setPosition(left_wall_x_position, left_wall_y_position);
    left_wall.setOrigin(left_wall_width/2, left_wall_height/2); // relative to the 500 x 20 rectangle, so this is in the middle?

    // Create right wall body
    float right_wall_x_position = 800.f; // needs to be the middle, as things are measured from the center
    float right_wall_y_position = 400.f;
    float right_wall_width = 20.f; // If we divide these by two we get the center of the rectangle
    float right_wall_height = size; // If we divide these by two we get the center of the rectangle
    // These numbers get modified by their CENTER, not the top left corner
    b2BodyDef right_wallBodyDef;
    right_wallBodyDef.position.Set(right_wall_x_position / SCALE, right_wall_y_position / SCALE);
    b2Body* right_wallBody = world.CreateBody(&right_wallBodyDef);
    b2PolygonShape right_wallBox;
    right_wallBox.SetAsBox((right_wall_width/2) / SCALE, (right_wall_height/2) / SCALE);
    right_wallBody->CreateFixture(&right_wallBox, 0.0f);

    // SFML shape for the right wall
    sf::RectangleShape right_wall(sf::Vector2f(right_wall_width, right_wall_height));
    right_wall.setFillColor(sf::Color::Green);
    right_wall.setPosition(right_wall_x_position, right_wall_y_position);
    right_wall.setOrigin(right_wall_width/2, right_wall_height/2); // relative to the 500 x 20 rectangle, so this is in the middle?

    #include "World.h"

Screen::Screen()
{
    world = new b2World(gravity);
    world_body.setSize(sf::Vector2f(world_width, world_height));
    world_body.setFillColor(sf::Color::Black);
    world_body.setOrigin(world_width / 2, world_height / 2);
}

World::World(float world_width, float world_height, b2Vec2 gravity) : world_width(world_width), world_height(world_height), gravity(gravity)
{
    world_body.setSize(sf::Vector2f(world_width, world_height));
    world_body.setFillColor(sf::Color::Black);
    world_body.setOrigin(world_width / 2, world_height / 2);
}

void World::drawWorld(sf::RenderWindow &window)
{
    window.draw(world_body);

    sf::RectangleShape topWall(sf::Vector2f(world_width, wallThickness));
    topWall.setPosition(0, 0);
    window.draw(topWall);

}

void World::createWall(b2World &world, float x, float y, float width, float height)
{
    b2BodyDef bodyDef;
    bodyDef.position.Set(x, y);
    b2Body *wall = world.CreateBody(&bodyDef);

    b2PolygonShape box;
    box.SetAsBox(width / 2, height / 2);

    wall->CreateFixture(&box, 0.0f); // zero density makes it static
}

// endif // SCREEN_H
#ifndef SCREEN_H
#define SCREEN_H

#include <Box2D/Box2D.h>
#include <SFML/Graphics.hpp>

class Screen
{
public:
    Screen();
    Screen(float world_width, float world_height, b2Vec2 gravity);
    void drawScreen(sf::RenderWindow &window);
    void createWall(b2World &world, float x, float y, float width, float height);

private:



};

#endif // WORLD_H