Wow I am pretty much done...
Le FINAL todo list:
Make interactible from terminal
 - make agent constructors that can be drawn from via commands
 - turn into classes instead of all in main, don't forget defaults
    - extract main into classes
    - initialization class
    - Draw engine
    - Physics engine
    - Game engine
 - upload from file

Finish graphing
 - agent scores in chronological order
    - color code by maneuver
    - color code by tactic

Tidying
 - add comments
 - standardize variable naming conventions
 - fix warnings
 - fix test 2 bug
    
    The rendering should not be a problem, loaded 100000 in ~1 second

    TODO:
    - Make program customizable from terminal
        - make the functions more flexible
        - add nodraw option
        - make strategies and maneuvers customizable
    - improve the file writing to store different games DONE
    - add python data analysis
        - add tag array DONE
        - save to a seperate file DONE
        - oh no it converts the data wrong in python DONE
        - try converting to int before storing in file DONE
    - Make the tactic and maneuver initialization process better DONE
        - ensure the same amounts of each agent or at least have that be an option DONE
        - make the code more dense if possible
    - add more game tactics
        - tit for tat DONE
            - I can hand it an array of size [agentnum] full of 0's at instantiation
            - I can then have  it take the agent it is playing and  reference the table for its move
        - tit for two tats
        - naive tit for tat DONE
            - I can have it store just the last move
            - I am going to need a spot to update behaviours after they make their moves
    - make tactics the color DONE
    - add more game maneuvers DONE
        - chase DONE
        - flee DONE
    - make maneuvers the color modification DONE




    DONE:
    - set up the physics engine DONE
    - set up the rendering engine DONE
    - set up the game loop DONE
    - set up the bodies and colors DONE
    - render the agents DONE
    - set up the collision detection DONE
    - set up the history unordered map DONE
    - set up the file writing DONEish
    - set up the game maneuvers DONEish
    - set up the game tactics DONEish

    improve the agent creation so there is less overlapping agents (use a feed system) DONE
    Next I need to make it so that agents that go in early don't have an advantage DONE

    make the simple agent? what does it even store? nothing the 'agent' here is the array position

    before I can move the game class, I have to set up collision detection DONE

    Next I have to add game strategies DONE
    I will do this via having an array of strategies that will return a 0 or 1 (betray or cooperate)
    This can then be fed into further game logic
    ? why is a .h instead of .cpp file? I think it is because it is a template class does it need a .cpp file?

    Move over game class Don't Need
    I think instead what I will do is just do it in main and see if that is just so much easier. Might make it
    functions later for easier readability or something but for now this works great

    connect game class to collision Don't need to do this because I am great and it is already DONE :)
    possibly set up listener in main loop? or in physics engine, I could return a list of collisions to main. nope

    Move over history class DONE
    Make history save to a file DONE

    set up maneuvers DONEish
    I can just have it return a b2vec2 of forces to apply store it in its own array
    I will set that array to 0 between, so it only pushes agents once and maybe every 10 rounds or something
    I have them in, but they are not complicated like I want them to be yet

    set up tactics DONEish
    I have them in but they are not complicated yet
    also they don't impact the game yet DONE although I might want to lower the values

    running into an extremely odd issue while trying to add titfortat
    randomly, the window will not open and the program will just end, which leads me to believe it is a memory issue
    However, I have tracked a possibly different error to the draw function
    So I will remove all randomness first and see if its still happens
    Cause: Titfortat
    probably because I store an array of 0's and ones, and with a lot of those I run into problems


    I  think the current problem is systemic, where I store many things as arrays and that leads to stack overflows
    tomarrow I will work on improving these memory issues, mostly via vectors
    I will also look into improving the pointers vs references and other memory management techniques






    THE DILEMMA:
    two options:
    - every tit for tat stores an array of 0's/1's that stores the last decision of a given agent
    - hardcoding it worked SOB
        - PROBLEM: memory?
    - Every time I call tit for tat, I search through the history to find their last interaction and get the value
        - PROBLEM: exponential time
    - A mix of the two: a matrix that stores the last move between two agents and can be referenced, its a mix of the two and should work well

    Currently it loads everything, but when something happens at round 1001 (gaming) it breaks
    Next goal is to find that

    Also for reducing memory more, now that I have a global history implementing bitshifts should be easier

    I need to literally take everything and find as many ways as possible to reduce their memory.
    One matrix of arrays stores only 0's and 1's - how can I make that more efficient? (bits? pointers?)
    Remove the score array (I can recunstruct it from history later)

    TODO: 10/3/2024
    graphs
        Average
        Individual?
        grouping
    
    Extendibility
        command line args
        game class
        init class

    Tidying
        add comments
        standardize variable naming conventions
        fix warnings
        fix test 2 bug